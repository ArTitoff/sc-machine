/*
 * This source file is part of an OSTIS project. For the latest info, see http://ostis.net
 * Distributed under the MIT License
 * (See accompanying file COPYING.MIT or copy at http://opensource.org/licenses/MIT)
 */

#include "sc-machine-runner/sc_machine_runner.hpp"

#include <iostream>
#include <atomic>
#include <thread>

#include <sc-memory/sc_memory.hpp>
#include <sc-memory/sc_debug.hpp>
#include <sc-memory/utils/sc_signal_handler.hpp>

#include <sc-config/sc_options.hpp>
#include <sc-config/sc_config.hpp>
#include <sc-config/sc_memory_config.hpp>

void PrintStartMessage(std::string const & binaryName)
{
  std::cout
      << "Usage:\n"
      << "  " << binaryName << " [options]\n\n"
      << "Required options:\n"
      << "  --binaries|-b <directory>               Provide a path to directory with knowledge base "
         "binaries. Knowledge base binaries should be generated by sc-builder binary.\n"
      << "  --config|-c <config-name>.ini           Provide a path to configuration file. If `binaries` "
         "option is not provided as argument, then this file should contain `binaries` option in "
         "`[sc-memory]` group.\n"
         "                                          Configuration file can be used to set additional (optional) "
         "options for "
      << binaryName << ".\n\n"
      << "Options:\n"
      << "  --extensions|-e <directory>             Provide a path to directories containing "
         "extensions. Extensions should represent compiled dynamic libraries of agent sc-modules.\n"
      << "  --clear                                 Run sc-memory in the mode when it overwrites "
         "existing knowledge base binaries.\n"
      << "  --verbose|-v                            Shutdown sc-memory without dumping its state into knowledge base "
         "binaries.\n"
      << "  --test|-t                               Test sc-memory state. "
      << "If this flag is specified, sc-memory will be initialized and shutdown immediately.\n"
      << "  --version                               Display version of " << binaryName << ".\n"
      << "  --help                                  Display this help message.\n";
}

sc_int RunMachine(sc_int argc, sc_char * argv[])
try
{
  std::string binaryName{argv[0]};

  ScOptions options{argc, argv};
  if (options.Has({"help"}))
  {
    PrintStartMessage(binaryName);
    return EXIT_SUCCESS;
  }

  if (options.Has({"version"}))
  {
    std::cout << ScMemoryConfig::GetVersion() << std::endl;
    return EXIT_SUCCESS;
  }

  std::string configPath;
  if (options.Has({"config", "c"}))
    configPath = options[{"config", "c"}].second;
  else
  {
    std::cout
        << "Error: Configuration file is required. Use --config|-c to specify the path to the configuration file.\n";
    std::cout << "For more information, run with --help.\n";
    return EXIT_FAILURE;
  }

  sc_bool saveOnShutdown = !options.Has({"verbose", "v"});

  ScMemory::ms_configPath = configPath;

  ScConfig config{configPath, {"extensions", "binaries", "log_file"}};
  ScParams memoryParams{options, {{"extensions", "e"}, {"binaries", "b"}, {"clear"}}};
  ScMemoryConfig memoryConfig{config, memoryParams};

  if (!memoryConfig.HasKey("binaries"))
  {
    std::cout << "Error: Knowledge base binaries directory is required. Use --binaries|-b to specify the path.\n";
    std::cout << "For more information, run with --help.\n";
    return EXIT_FAILURE;
  }

  std::atomic_bool isRun;
  if (!ScMemory::Initialize(memoryConfig.GetParams()))
    goto error;

  utils::ScSignalHandler::Initialize();

  isRun = !options.Has({"test", "t"});
  // LCOV_EXCL_START
  utils::ScSignalHandler::m_onTerminate = [&isRun]()
  {
    isRun = SC_FALSE;
  };

  while (isRun)
  {
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
  }
  // LCOV_EXCL_STOP

error:
  return ScMemory::Shutdown(saveOnShutdown) ? EXIT_SUCCESS : EXIT_FAILURE;
}

// LCOV_EXCL_START
catch (utils::ScException const & e)
{
  SC_LOG_ERROR(e.Description());
  return EXIT_FAILURE;
}

// LCOV_EXCL_STOP
